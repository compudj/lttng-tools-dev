#!/bin/bash
#
# Copyright (C) - 2019 Jonathan Rajotte-Julien <jonathan.rajotte-julien@efficios.com>
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; version 2.1 of the License.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA

TEST_DESC="Clear - Kernel tracing"

CURDIR=$(dirname $0)/
TESTDIR=$CURDIR/../../..
EVENT_NAME="lttng_test_filter_event"

TRACE_PATH=$(mktemp -d)

NUM_TESTS=130

source $TESTDIR/utils/utils.sh

function clean_path ()
{
	local trace_path=$1
	set -u
	rm -rf $trace_path/*
	set +u
}

function cond_start_tracing ()
{
	local session_name=$1
	local tracing_active=$2

	if [[ $tracing_active -ne 1 ]]; then
		start_lttng_tracing_ok $session_name
	fi
}

function cond_stop_tracing ()
{
	local session_name=$1
	local tracing_active=$2

	if [[ $tracing_active -ne 1 ]]; then
		stop_lttng_tracing_ok $session_name
	fi
}

function do_clear_session ()
{
	local session_name=$1
	local tracing_active=$2
	local clear_twice=$3

	cond_stop_tracing $session_name $tracing_active
	lttng_clear_session_ok $SESSION_NAME
	if [[ $clear_twice -eq 1 ]]; then
		lttng_clear_session_ok $SESSION_NAME
	fi
	cond_start_tracing $session_name $tracing_active
}

function test_kernel_streaming ()
{
	local tracing_active=$1
	local clear_twice=$2
	local local_path="${TRACE_PATH}/${HOSTNAME}/${SESSION_NAME}*"

	diag "Test kernel streaming clear (tracing_active=$tracing_active) (clear_twice=$clear_twice)"
	create_lttng_session_uri $SESSION_NAME net://localhost
	lttng_enable_kernel_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	# Generate 10 events that will sit in the buffers.
	echo -n "10" > /proc/lttng-test-filter-event

	do_clear_session $SESSION_NAME $tracing_active $clear_twice

	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_empty $local_path

	destroy_lttng_session_ok $SESSION_NAME
}

function test_kernel_streaming_rotate_clear ()
{
	local tracing_active=$1
	local clear_twice=$2
	local local_path="${TRACE_PATH}/${HOSTNAME}/${SESSION_NAME}*"

	diag "Test kernel streaming rotate-clear (tracing_active=$tracing_active, clear_twice=$clear_twice)"
	create_lttng_session_uri $SESSION_NAME net://localhost
	lttng_enable_kernel_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	echo -n "1" > /proc/lttng-test-filter-event
	rotate_session_ok $SESSION_NAME
	echo -n "2" > /proc/lttng-test-filter-event
	do_clear_session $SESSION_NAME $tracing_active $clear_twice
	echo -n "3" > /proc/lttng-test-filter-event

	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_count $EVENT_NAME $local_path 4

	destroy_lttng_session_ok $SESSION_NAME
}

function test_kernel_streaming_clear_rotate()
{
	local tracing_active=$1
	local clear_twice=$2
	local local_path="${TRACE_PATH}/${HOSTNAME}/${SESSION_NAME}*"

	diag "Test kernel streaming clear-rotate (tracing_active=$tracing_active clear_twice=$clear_twice)"
	create_lttng_session_uri $SESSION_NAME net://localhost
	lttng_enable_kernel_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	echo -n "1" > /proc/lttng-test-filter-event
	do_clear_session $SESSION_NAME $tracing_active $clear_twice
	echo -n "2" > /proc/lttng-test-filter-event
	rotate_session_ok $SESSION_NAME
	echo -n "3" > /proc/lttng-test-filter-event

	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_count $EVENT_NAME $local_path 5

	destroy_lttng_session_ok $SESSION_NAME
}

#TODO: validate through live protocol rather than on-disk
function test_kernel_streaming_live ()
{
	local tracing_active=$1
	local clear_twice=$2
	local local_path="${TRACE_PATH}/${HOSTNAME}/${SESSION_NAME}*"

	diag "Test kernel streaming live clear (tracing_active=$tracing_active clear_twice=$clear_twice)"
	create_lttng_session_uri $SESSION_NAME net://localhost "--live"
	lttng_enable_kernel_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	# Generate 10 events that will sit in the buffers.
	echo -n "10" > /proc/lttng-test-filter-event
	do_clear_session $SESSION_NAME $tracing_active $clear_twice
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_empty $local_path

	destroy_lttng_session_ok $SESSION_NAME
}

function test_kernel_local ()
{
	local tracing_active=$1
	local clear_twice=$2

	diag "Test kernel local (tracing_active=$tracing_active, clear_twice=$clear_twice)"
	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	lttng_enable_kernel_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	# Generate 10 events that will sit in the buffers.
	echo -n "10" > /proc/lttng-test-filter-event
	do_clear_session $SESSION_NAME $tracing_active $clear_twice
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_empty $TRACE_PATH

	destroy_lttng_session_ok $SESSION_NAME
}

function test_kernel_local_rotate_clear ()
{
	local tracing_active=$1
	local clear_twice=$2

	diag "Test kernel local rotate-clear (tracing_active=$tracing_active, clear_twice=$clear_twice)"
	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	lttng_enable_kernel_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	echo -n "1" > /proc/lttng-test-filter-event
	rotate_session_ok $SESSION_NAME
	echo -n "2" > /proc/lttng-test-filter-event
	do_clear_session $SESSION_NAME $tracing_active $clear_twice
	echo -n "3" > /proc/lttng-test-filter-event
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_count $EVENT_NAME $TRACE_PATH 4

	destroy_lttng_session_ok $SESSION_NAME
}

function test_kernel_local_clear_rotate()
{
	local tracing_active=$1
	local clear_twice=$2

	diag "Test kernel local clear-rotate (tracing_active=$tracing_active, clear_twice=$clear_twice)"
	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	lttng_enable_kernel_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	echo -n "1" > /proc/lttng-test-filter-event
	do_clear_session $SESSION_NAME $tracing_active $clear_twice
	echo -n "2" > /proc/lttng-test-filter-event
	rotate_session_ok $SESSION_NAME
	echo -n "3" > /proc/lttng-test-filter-event
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_count $EVENT_NAME $TRACE_PATH 5

	destroy_lttng_session_ok $SESSION_NAME
}

function do_kernel_snapshot ()
{
	local session_name=$1
	local trace_path=$2
	local tracing_active=$3
	local clear_twice=$4

	lttng_enable_kernel_event $session_name $EVENT_NAME
	start_lttng_tracing_ok $session_name

	# Generate 10 events that will sit in the buffers.
	echo -n "10" > /proc/lttng-test-filter-event

	# Take a first snapshot and validate that the events are present.
	lttng_snapshot_record $session_name
	stop_lttng_tracing_ok $session_name
	validate_trace_count $EVENT_NAME $trace_path 10

	# Clean the output path
	clean_path $trace_path
	start_lttng_tracing_ok $session_name

	do_clear_session $SESSION_NAME $tracing_active $clear_twice

	# Make sure the subsequent snapshot is empty and valid.
	lttng_snapshot_record $session_name
	stop_lttng_tracing_ok $session_name
	validate_trace_empty $trace_path

	# Clean the output path
	clean_path $trace_path
	start_lttng_tracing_ok $session_name

	# Make sure that everything still works, generate events and take a
	# snapshot.
	echo -n "10" > /proc/lttng-test-filter-event
	lttng_snapshot_record $session_name
	stop_lttng_tracing_ok $session_name
	validate_trace_count $EVENT_NAME $trace_path 10
}

function test_kernel_streaming_snapshot ()
{
	local tracing_active=$1
	local clear_twice=$2

	diag "Test kernel streaming snapshot clear (tracing_active=$tracing_active, clear_twice=$clear_twice)"

	create_lttng_session_uri $SESSION_NAME net://localhost "--snapshot"
	do_kernel_snapshot $SESSION_NAME $TRACE_PATH $tracing_active $clear_twice
	destroy_lttng_session_ok $SESSION_NAME
}

function test_kernel_local_snapshot ()
{
	local tracing_active=$1
	local clear_twice=$2

	diag "Test kernel local snapshot clear (tracing_active=$tracing_active, clear_twice=$clear_twice)"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH "--snapshot"
	do_kernel_snapshot $SESSION_NAME $TRACE_PATH $tracing_active $clear_twice
	destroy_lttng_session_ok $SESSION_NAME
}

plan_tests $NUM_TESTS

print_test_banner "$TEST_DESC"

if [ "$(id -u)" == "0" ]; then
	isroot=1
else
	isroot=0
fi

tests=( test_kernel_streaming
	test_kernel_streaming_rotate_clear
	test_kernel_streaming_clear_rotate
	test_kernel_streaming_live
	test_kernel_local
	test_kernel_local_rotate_clear
	test_kernel_local_clear_rotate
	test_kernel_streaming_snapshot
	test_kernel_local_snapshot
)

skip $isroot "Root access is needed. Skipping all kernel streaming tests." $NUM_TESTS ||
{
	validate_lttng_modules_present

	start_lttng_relayd "-o $TRACE_PATH"
	start_lttng_sessiond
	modprobe lttng-test

	# Clear with tracing active, clear once
	for fct_test in ${tests[@]};
	do
		SESSION_NAME=$(randstring 16 0)
		${fct_test} 1 0
		clean_path $TRACE_PATH
	done

	# Clear with tracing active, clear twice
	for fct_test in ${tests[@]};
	do
		SESSION_NAME=$(randstring 16 0)
		${fct_test} 1 1
		clean_path $TRACE_PATH
	done

	# Clear with tracing inactive, clear once
	for fct_test in ${tests[@]};
	do
		SESSION_NAME=$(randstring 16 0)
		${fct_test} 0 0
		clean_path $TRACE_PATH
	done

	# Clear with tracing inactive, clear twice
	for fct_test in ${tests[@]};
	do
		SESSION_NAME=$(randstring 16 0)
		${fct_test} 0 1
		clean_path $TRACE_PATH
	done

	rmmod lttng-test
	stop_lttng_sessiond
	stop_lttng_relayd
}

clean_path $TRACE_PATH
