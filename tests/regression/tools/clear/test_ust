#!/bin/bash
#
# Copyright (C) - 2019 Jonathan Rajotte-Julien <jonathan.rajotte-julien@efficios.com>
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; version 2.1 of the License.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA

TEST_DESC="Clear - UST tracing"

CURDIR=$(dirname $0)/
TESTDIR=$CURDIR/../../..
EVENT_NAME="tp:tptest"
SESSION_NAME=""
TESTAPP_PATH="$TESTDIR/utils/testapp"
TESTAPP_NAME="gen-ust-events"
TESTAPP_BIN="$TESTAPP_PATH/$TESTAPP_NAME/$TESTAPP_NAME"

NUM_TESTS=166

TRACE_PATH=$(mktemp -d)

source $TESTDIR/utils/utils.sh

if [ ! -x "$TESTAPP_BIN" ]; then
	BAIL_OUT "No UST events binary detected."
fi

function clean_path ()
{
	local trace_path=$1
	set -u
	rm -rf $trace_path/*
	set +u
}

function cond_start_tracing ()
{
	local session_name=$1
	local tracing_active=$2

	if [[ $tracing_active -ne 1 ]]; then
		start_lttng_tracing_ok $session_name
	fi
}

function cond_stop_tracing ()
{
	local session_name=$1
	local tracing_active=$2

	if [[ $tracing_active -ne 1 ]]; then
		stop_lttng_tracing_ok $session_name
	fi
}

function test_ust_streaming ()
{
	local tracing_active=$1
	local local_path="${TRACE_PATH}/${HOSTNAME}/${SESSION_NAME}*"

	diag "Test ust streaming clear (tracing_active=$tracing_active)"
	create_lttng_session_uri $SESSION_NAME net://localhost
	enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	$TESTAPP_BIN -i 10
	cond_stop_tracing $SESSION_NAME $tracing_active
	lttng_clear_session_ok $SESSION_NAME
	cond_start_tracing $SESSION_NAME $tracing_active
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_empty $local_path

	destroy_lttng_session_ok $SESSION_NAME
}

function test_ust_streaming_rotate_clear ()
{
	local tracing_active=$1
	local local_path="${TRACE_PATH}/${HOSTNAME}/${SESSION_NAME}*"

	diag "Test ust streaming rotate-clear (tracing_active=$tracing_active)"
	create_lttng_session_uri $SESSION_NAME net://localhost
	enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	$TESTAPP_BIN -i 1
	rotate_session_ok $SESSION_NAME
	$TESTAPP_BIN -i 2
	cond_stop_tracing $SESSION_NAME $tracing_active
	lttng_clear_session_ok $SESSION_NAME
	cond_start_tracing $SESSION_NAME $tracing_active
	$TESTAPP_BIN -i 3
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_count $EVENT_NAME $local_path 4

	destroy_lttng_session_ok $SESSION_NAME
}

function test_ust_streaming_clear_rotate ()
{
	local tracing_active=$1
	local local_path="${TRACE_PATH}/${HOSTNAME}/${SESSION_NAME}*"

	diag "Test ust streaming clear-rotate (tracing_active=$tracing_active)"
	create_lttng_session_uri $SESSION_NAME net://localhost
	enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	$TESTAPP_BIN -i 1
	cond_stop_tracing $SESSION_NAME $tracing_active
	lttng_clear_session_ok $SESSION_NAME
	cond_start_tracing $SESSION_NAME $tracing_active
	$TESTAPP_BIN -i 2
	rotate_session_ok $SESSION_NAME
	$TESTAPP_BIN -i 3
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_count $EVENT_NAME $local_path 5

	destroy_lttng_session_ok $SESSION_NAME
}

#TODO: validate through live protocol rather than on-disk
function test_ust_streaming_live ()
{
	local tracing_active=$1
	local local_path="${TRACE_PATH}/${HOSTNAME}/${SESSION_NAME}*"

	diag "Test ust streaming live clear (tracing_active=$tracing_active)"
	create_lttng_session_uri $SESSION_NAME net://localhost "--live"
	enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	$TESTAPP_BIN -i 10
	cond_stop_tracing $SESSION_NAME $tracing_active
	lttng_clear_session_ok $SESSION_NAME
	cond_start_tracing $SESSION_NAME $tracing_active
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_empty $local_path

	destroy_lttng_session_ok $SESSION_NAME
}

function test_ust_local ()
{
	local tracing_active=$1

	diag "Test ust local (tracing_active=$tracing_active)"
	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	$TESTAPP_BIN -i 10
	cond_stop_tracing $SESSION_NAME $tracing_active
	lttng_clear_session_ok $SESSION_NAME
	cond_start_tracing $SESSION_NAME $tracing_active
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_empty $TRACE_PATH

	destroy_lttng_session_ok $SESSION_NAME
}

function test_ust_local_rotate_clear ()
{
	local tracing_active=$1

	diag "Test ust local rotate-clear (tracing_active=$tracing_active)"
	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	$TESTAPP_BIN -i 1
	rotate_session_ok $SESSION_NAME
	$TESTAPP_BIN -i 2
	cond_stop_tracing $SESSION_NAME $tracing_active
	lttng_clear_session_ok $SESSION_NAME
	cond_start_tracing $SESSION_NAME $tracing_active
	$TESTAPP_BIN -i 3
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_count $EVENT_NAME $TRACE_PATH 4

	destroy_lttng_session_ok $SESSION_NAME
}

function test_ust_local_clear_rotate ()
{
	local tracing_active=$1

	diag "Test ust local clear-rotate (tracing_active=$tracing_active)"
	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME
	$TESTAPP_BIN -i 1
	cond_stop_tracing $SESSION_NAME $tracing_active
	lttng_clear_session_ok $SESSION_NAME
	cond_start_tracing $SESSION_NAME $tracing_active
	$TESTAPP_BIN -i 2
	rotate_session_ok $SESSION_NAME
	$TESTAPP_BIN -i 3
	stop_lttng_tracing_ok $SESSION_NAME

	validate_trace_count $EVENT_NAME $TRACE_PATH 5

	destroy_lttng_session_ok $SESSION_NAME
}

function do_ust_snapshot ()
{
	local session_name=$1
	local trace_path=$2
	local tracing_active=$3

	enable_ust_lttng_event_ok $session_name $EVENT_NAME
	start_lttng_tracing_ok $session_name

	# Generate 10 events that will sit in the buffers.
	$TESTAPP_BIN -i 10

	# Take a first snapshot and validate that the events are present.
	lttng_snapshot_record $session_name
	stop_lttng_tracing_ok $session_name
	validate_trace_count $EVENT_NAME $trace_path 10

	# Clean the output path
	clean_path $trace_path
	start_lttng_tracing_ok $session_name

	cond_stop_tracing $SESSION_NAME $tracing_active
	lttng_clear_session_ok $session_name
	cond_start_tracing $SESSION_NAME $tracing_active

	# Make sure the subsequent snapshot is empty and valid.
	lttng_snapshot_record $session_name
	stop_lttng_tracing_ok $session_name
	validate_trace_empty $trace_path

	# Clean the output path
	clean_path $trace_path
	start_lttng_tracing_ok $session_name

	# Make sure that everything still works, generate events and take a
	# snapshot.
	$TESTAPP_BIN -i 10
	lttng_snapshot_record $session_name
	stop_lttng_tracing_ok $session_name
	validate_trace_count $EVENT_NAME $trace_path 10
}

function test_ust_streaming_snapshot ()
{
	local tracing_active=$1

	diag "Test ust streaming snapshot clear (tracing_active=$tracing_active)"

	create_lttng_session_uri $SESSION_NAME net://localhost "--snapshot"
	do_ust_snapshot $SESSION_NAME $TRACE_PATH $tracing_active
	destroy_lttng_session_ok $SESSION_NAME
}

function test_ust_local_snapshot ()
{
	local tracing_active=$1

	diag "Test ust local snapshot clear (tracing_active=$tracing_active)"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH "--snapshot"
	do_ust_snapshot $SESSION_NAME $TRACE_PATH $tracing_active
	destroy_lttng_session_ok $SESSION_NAME
}

function test_ust_local_snapshot_per_pid ()
{
	local tracing_active=$1
	local channel_name="channel0"
	local file_sync_before_last=$(mktemp -u)
	local file_sync_before_last_touch=$(mktemp -u)
	local file_sync_before_exit=$(mktemp -u)
	local file_sync_before_exit_touch=$(mktemp -u)

	diag "Test ust local snapshot clear per pid (tracing_active=$tracing_active)"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH "--snapshot"
	enable_ust_lttng_channel_ok $SESSION_NAME $channel_name --buffers-pid
	enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME $channel_name
	start_lttng_tracing_ok $SESSION_NAME

	# Generate 10 events that will sit in the buffers.
	$TESTAPP_BIN -i 10 -w 0 \
		--sync-before-last-event ${file_sync_before_last} \
		--sync-before-last-event-touch ${file_sync_before_last_touch} \
		--sync-before-exit ${file_sync_before_exit} \
		--sync-before-exit-touch ${file_sync_before_exit_touch} >/dev/null 2>&1 &

	# Continue only when there is only the last event remaining.
	while [ ! -f "${file_sync_before_last_touch}" ]; do
		sleep 0.5
	done

	# Take a first snapshot and validate that the events are present.
	lttng_snapshot_record $SESSION_NAME
	stop_lttng_tracing_ok $SESSION_NAME
	validate_trace_count $EVENT_NAME $TRACE_PATH 9

	# Clean the output path
	clean_path $TRACE_PATH
	start_lttng_tracing_ok $SESSION_NAME

	cond_stop_tracing $SESSION_NAME $tracing_active
	lttng_clear_session_ok $SESSION_NAME
	cond_start_tracing $SESSION_NAME $tracing_active

	# Make sure the subsequent snapshot is empty and valid.
	lttng_snapshot_record $SESSION_NAME
	stop_lttng_tracing_ok $SESSION_NAME
	validate_trace_empty $TRACE_PATH

	# Validate that tracing still works and subsequent snapshots are valid.
	# Clean the output path.
	clean_path $TRACE_PATH
	start_lttng_tracing_ok $SESSION_NAME

	# Continue over the last event.
	touch ${file_sync_before_last}

	# Wait for the before exit sync point. This ensure that we went over the
	# last tracepoint.
	while [ ! -f "${file_sync_before_exit_touch}" ]; do
		sleep 0.5
	done

	# Make sure the snapshot contains the last event.
	lttng_snapshot_record $SESSION_NAME
	stop_lttng_tracing_ok $SESSION_NAME
	validate_trace_count $EVENT_NAME $TRACE_PATH 1

	# Release the application.
	touch ${file_sync_before_exit}
	wait
	destroy_lttng_session_ok $SESSION_NAME

	rm -f ${file_sync_before_last}
	rm -f ${file_sync_before_last_touch}
	rm -f ${file_sync_before_exit}
	rm -f ${file_sync_before_exit_touch}
}

plan_tests $NUM_TESTS

print_test_banner "$TEST_DESC"

tests=(
	test_ust_streaming
	test_ust_streaming_rotate_clear
	test_ust_streaming_clear_rotate
	test_ust_streaming_live
	test_ust_local
	test_ust_local_rotate_clear
	test_ust_local_clear_rotate
	test_ust_streaming_snapshot
	test_ust_local_snapshot
	test_ust_local_snapshot_per_pid
)

start_lttng_relayd "-o $TRACE_PATH"
start_lttng_sessiond

# Clear with tracing active
for fct_test in ${tests[@]};
do
	SESSION_NAME=$(randstring 16 0)
	${fct_test} 1
	clean_path $TRACE_PATH
done

# Clear with tracing inactive
for fct_test in ${tests[@]};
do
	SESSION_NAME=$(randstring 16 0)
	${fct_test} 0
	clean_path $TRACE_PATH
done


stop_lttng_sessiond
stop_lttng_relayd
